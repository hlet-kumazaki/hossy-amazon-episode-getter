name: Fetch & Update (AmazonMusic -> WP)

on:
  workflow_dispatch:
    inputs:
      post_id:
        description: "Target post_id (optional)"
        required: false
        type: string
  schedule:
    # ÊØéÈÄ±ÈáëÊõú 06:15 JSTÔºà= Êú®Êõú 21:15 UTCÔºâ
    - cron: "15 21 * * 4"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: |
          npm ci || npm i
          npx playwright install --with-deps

      - name: Fetch URL & Update WP
        id: runit
        env:
          CHANNEL_URL: ${{ vars.CHANNEL_URL }}   # ‚Üê ÊâãÂãï‰∏äÊõ∏„Åç„ÅØÂªÉÊ≠¢„ÄÇrepo Variables „Åã„Çâ„ÅÆ„ÅøÂèñÂæó
          WP_USER: ${{ secrets.WP_USER }}
          WP_PASS: ${{ secrets.WP_PASS }}
          FIELD_KEY: ${{ vars.FIELD_KEY }}
          ENDPOINTS: ${{ vars.ENDPOINTS }}
          POST_ID: ${{ inputs.post_id }}         # ‚Üê ÊâãÂãïRunÊôÇ„Å†„Åë‰ªªÊÑèÊåáÂÆöÂèØ
        run: |
          if [ -z "$CHANNEL_URL" ]; then echo "CHANNEL_URL not provided"; exit 1; fi
          OUT=$(node amz_first_card_and_update_wp.js)
          echo "$OUT" | tee result.json
          echo "json=$OUT" >> "$GITHUB_OUTPUT"
          EP=$(node -e 'const o=JSON.parse(process.argv[1]); console.log(o.episode_url||"")' "$OUT")
          echo "episode_url=$EP" >> "$GITHUB_OUTPUT"

      - name: Summary
        run: |
          echo "### Result JSON" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.runit.outputs.json }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Notify to Google Chat
        if: always()  # ÊàêÂäü/Â§±Êïó„Å©„Å°„Çâ„ÇÇÈÄöÁü•
        env:
          CHAT_WEBHOOK_URL: ${{ secrets.CHAT_WEBHOOK_URL }}
          RESULT_JSON: ${{ steps.runit.outputs.json }}
        run: |
          set -euo pipefail
          STATUS="${{ job.status }}"
          SIMPLE_TEXT="[$GITHUB_WORKFLOW] $GITHUB_JOB"$'\n'"status: ${STATUS}"

          # RESULT_JSON may be empty on early failures; handle gracefully
          if [ -z "${RESULT_JSON:-}" ]; then
            jq -n --arg t "$SIMPLE_TEXT" '{ text: $t }' \
            | curl -sS -X POST "$CHAT_WEBHOOK_URL" -H 'Content-Type: application/json' -d @-
            exit 0
          fi

          # Try to parse RESULT_JSON; if parse fails, fallback to simple text
          if ! echo "$RESULT_JSON" | jq . >/dev/null 2>&1; then
            jq -n --arg t "$SIMPLE_TEXT"$'\n\n'"(invalid RESULT_JSON)" '{ text: $t }' \
            | curl -sS -X POST "$CHAT_WEBHOOK_URL" -H 'Content-Type: application/json' -d @-
            exit 0
          fi

          ICON="‚úÖ"
          if [ "$STATUS" != "success" ]; then ICON="üõë"; fi

          # Build cardsV2 payload from RESULT_JSON
          CARD_JSON=$(
            jq -n \
              --arg icon "$ICON" \
              --arg status "$STATUS" \
              --arg wf "$GITHUB_WORKFLOW" \
              --arg job "$GITHUB_JOB" \
              --arg run_url "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
              --argjson res "$(echo "$RESULT_JSON" | jq '.')" '
              def plat_line($p):
                {
                  decoratedText: {
                    startIcon: { knownIcon: ( if ($p.coherence.matched==true) then "CHECK_CIRCLE" else "ERROR" end ) },
                    text:
                      ( ($p.name // "?") + " ‚Äî " +
                        ( if ($p.updated==true) then "updated"
                          else if (($p.skipped_reason//"")|length>0) then ("skipped: " + ($p.skipped_reason))
                          else "no-change" end end
                        )
                      )
                      + ( if ($p.coherence|type) == "object"
                          then
                            "  (" +
                            "Episode expected " + ( ($p.coherence.expected//null)|tostring ) +
                            " / actual " + ( ($p.coherence.actual//null)|tostring ) + " " +
                            ( if $p.coherence.matched==true then "‚úÖ" else "‚ùå" end )
                            + ")"
                          else "" end ),
                    bottomText: ( ($p.episode_url // "-") )
                  }
                }
              ;
              {
                cardsV2: [
                  {
                    cardId: "podcast_result",
                    card: {
                      header: {
                        title: ($icon + " Podcast Êõ¥Êñ∞: " + (if $status=="success" then "ÊàêÂäü" else "Â§±Êïó" end)),
                        subtitle: ($wf + " / " + $job),
                        imageUrl: null
                      },
                      sections: [
                        {
                          widgets: [
                            { textParagraph: { text: ("Run: " + $run_url) } }
                          ]
                        },
                        {
                          header: "Platforms",
                          widgets: ( ($res.platforms // []) | map( plat_line(.) ) )
                        }
                      ]
                    }
                  }
                ]
              }
              '
          )

          # Fallback to text if we somehow failed to construct cards
          if [ -z "$CARD_JSON" ]; then
            jq -n --arg t "$SIMPLE_TEXT"$'\n\n'"$RESULT_JSON" '{ text: $t }' \
            | curl -sS -X POST "$CHAT_WEBHOOK_URL" -H 'Content-Type: application/json' -d @-
            exit 0
          fi

          echo "$CARD_JSON" \
          | curl -sS -X POST "$CHAT_WEBHOOK_URL" -H 'Content-Type: application/json' -d @-

      - uses: actions/upload-artifact@v4
        with:
          name: result
          path: result.json

    concurrency:
      group: amz-wp-update
      cancel-in-progress: true