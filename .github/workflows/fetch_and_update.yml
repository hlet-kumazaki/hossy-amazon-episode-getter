name: Fetch & Update (AmazonMusic -> WP)

on:
  workflow_dispatch:
    inputs:
      post_id:
        description: "Target post_id (optional)"
        required: false
        type: string
  schedule:
    # 毎週金曜 06:15 JST（= 木曜 21:15 UTC）
    - cron: "15 21 * * 4"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: |
          npm ci || npm i
          npx playwright install --with-deps

      - name: Fetch URL & Update WP
        id: runit
        env:
          CHANNEL_URL: ${{ vars.CHANNEL_URL }}   # ← 手動上書きは廃止。repo Variables からのみ取得
          WP_USER: ${{ secrets.WP_USER }}
          WP_PASS: ${{ secrets.WP_PASS }}
          FIELD_KEY: ${{ vars.FIELD_KEY }}
          ENDPOINTS: ${{ vars.ENDPOINTS }}
          POST_ID: ${{ inputs.post_id }}         # ← 手動Run時だけ任意指定可
        run: |
          if [ -z "$CHANNEL_URL" ]; then echo "CHANNEL_URL not provided"; exit 1; fi
          OUT=$(node amz_first_card_and_update_wp.js)
          echo "$OUT" | tee result.json
          echo "json=$OUT" >> "$GITHUB_OUTPUT"
          EP=$(node -e 'const o=JSON.parse(process.argv[1]); console.log(o.episode_url||"")' "$OUT")
          echo "episode_url=$EP" >> "$GITHUB_OUTPUT"

      - name: Summary
        run: |
          echo "### Result JSON" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          if [ -f result.json ]; then cat result.json >> $GITHUB_STEP_SUMMARY; else echo '{}' >> $GITHUB_STEP_SUMMARY; fi
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Prepare email content
        if: always()
        id: emailprep
        run: |
          set -euo pipefail

          # Read result.json directly (more robust than passing JSON via outputs)
          if [ -f result.json ]; then
            RES=$(cat result.json)
          else
            RES="{}"
          fi

          # Validate JSON; if invalid, fall back to empty object to avoid mixed outputs
          if ! echo "$RES" | jq . >/dev/null 2>&1; then
            RES="{}"
          fi

          # Compute overall status text from RESULT_JSON
          STATUS_TXT=$(
            echo "$RES" | jq -r '
              def okcount: ([.platforms[]? | select(.updated==true)] | length);
              def total: (.platforms|length // 0);
              if (total == 0) then "不明"
              elif (okcount==0) then "全て失敗"
              elif (okcount==total) then "全て成功"
              else "一部成功" end
            '
          )

          TARGET_TITLE=$(echo "$RES" | jq -r '.target_title // "(title unknown)"')
          TARGET_URL=$(echo   "$RES" | jq -r '.target_url   // "(url unknown)"')

          SUBJECT="エピソードURL更新通知 — ${STATUS_TXT} / ${TARGET_TITLE}"

          PLATFORM_LINES=$(
            echo "$RES" | jq -r '
              if ((.platforms|type) == "array" and (.platforms|length) > 0) then
                [
                  .platforms[] |
                  "* " + (.name // "?") + " — " +
                  ( if .updated==true then "updated"
                    else if ((.skipped_reason|type)=="string" and (.skipped_reason|length>0)) then ("skipped: " + .skipped_reason)
                    else "no-change" end end
                  ) +
                  ( if (.coherence|type)=="object"
                    then "  (最新エピソード整合性 " + ( if .coherence.matched==true then "✅" else "❌" end ) + ")"
                    else "" end )
                ] | join("\n")
              else
                "(platform data: none)"
              end
            '
          )

          {
            echo "エピソードURL更新通知"
            echo "対象ページ：${TARGET_TITLE}"
            echo "${TARGET_URL}"
            echo
            echo "${PLATFORM_LINES}"
          } > email_body.txt

          {
            echo "subject<<EOF"
            printf '%s\n' "$SUBJECT"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          {
            echo "body<<EOF"
            cat email_body.txt
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Send notification email
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ${{ steps.emailprep.outputs.subject }}
          to: hossy@hossy.org,y.kumazaki@hlet.jp
          # to: y.kumazaki@hlet.jp
          from: ${{ secrets.MAIL_FROM }}
          body: ${{ steps.emailprep.outputs.body }}

      - uses: actions/upload-artifact@v4
        with:
          name: result
          path: result.json

    concurrency:
      group: amz-wp-update
      cancel-in-progress: true