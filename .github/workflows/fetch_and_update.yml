name: Fetch & Update (AmazonMusic -> WP)

on:
  workflow_dispatch:
    inputs:
      post_id:
        description: "Target post_id (optional)"
        required: false
        type: string
  repository_dispatch:
    types: [run-fetch-update, cron-trigger]
  # schedule は GitHub 側の遅延回避のため使用しない（ロリポップの cron で 06:03 JST に外部発火）
  #schedule:
  #  # 毎週金曜 06:03 JST（= 木曜 21:03 UTC）
  #  - cron: "3 21 * * 4"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: |
          npm ci || npm i
          npx playwright install --with-deps

      - name: Fetch URL & Update WP
        id: runit
        env:
          CHANNEL_URL: ${{ vars.CHANNEL_URL }}   # repo Variables で管理
          WP_USER: ${{ secrets.WP_USER }}
          WP_PASS: ${{ secrets.WP_PASS }}
          FIELD_KEY: ${{ vars.FIELD_KEY }}
          ENDPOINTS: ${{ vars.ENDPOINTS }}
          POST_ID: ${{ inputs.post_id }}         # 手動Run時のみ任意指定可
        run: |
          set -euo pipefail
          if [ -z "${CHANNEL_URL:-}" ]; then echo "CHANNEL_URL not provided"; exit 1; fi
          OUT=$(node amz_first_card_and_update_wp.cjs)
          echo "$OUT" | tee result.json
          echo "json=$OUT" >> "$GITHUB_OUTPUT"

      - name: Summary
        run: |
          echo "### Result JSON" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          if [ -f result.json ]; then cat result.json >> $GITHUB_STEP_SUMMARY; else echo '{}' >> $GITHUB_STEP_SUMMARY; fi
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Prepare email content
        if: always()
        id: emailprep
        run: |
          set -euo pipefail

          # Read result.json (fallback to {})
          if [ -f result.json ]; then RES=$(cat result.json); else RES="{}"; fi
          if ! echo "$RES" | jq . >/dev/null 2>&1; then RES="{}"; fi

          STATUS_TXT=$( 
            echo "$RES" | jq -r '
              def okcount: ([.platforms[]? | select(.updated==true)] | length);
              def total: (.platforms|length // 0);
              if (total == 0) then "不明"
              elif (okcount==0) then "全て失敗"
              elif (okcount==total) then "全て成功"
              else "一部成功" end
            '
          )

          TARGET_TITLE=$(echo "$RES" | jq -r '.target_title // "(title unknown)"')
          TARGET_URL=$(echo   "$RES" | jq -r '.target_url   // "(url unknown)"')
          SUBJECT="エピソードURL更新通知 — ${STATUS_TXT} / ${TARGET_TITLE}"

          # JST current timestamp for "じっし日時：YYYY / mm / dd H:i"
          JST_NOW=$(TZ=Asia/Tokyo date '+%Y / %m / %d %H:%M')

          # Build platform sections in fixed order with human-readable labels + 取得ログ
          PLAT_SECTIONS=$( 
            echo "$RES" | jq -r '
              def reason($p): ($p.skipped_reason // $p.reason // ($p.meta // {}).reason // ($p.meta // {}).skipped_reason);
              def status($p):
                if ($p.updated == true) then "成功"
                elif (reason($p)) then "スキップ"
                elif ($p.updated == false) then "失敗"
                else "不明" end;
              def pick($name; $label):
                ( first(.platforms[]? | select(.name==$name)) // {} ) as $p
                | {
                    label:  $label,
                    sym:    ( if ($p.coherence.matched // false) then "✅" else "❌" end ),
                    url:    ( $p.episode_url // "" ),
                    reason: ( reason($p) ),
                    status: ( status($p) )
                  };
              [
                pick("amazon_music"; "Amazon Music"),
                pick("youtube";      "YouTube Music"),
                pick("itunes";       "Apple Podcasts"),
                pick("spotify";      "Spotify")
              ]
              | .[]
              | "◯\(.label)\n- 整合性チェック：\(.sym)\n- 更新結果：\(.status)\n- URL：\(.url // "（未取得）")\n- 取得ログ：\(.reason // "—")\n"
            '
          )

          {
            echo "エピソードURL取り込みを実行しました。"
            echo
            echo "実行日時：${JST_NOW}"
            echo "対象ページ：${TARGET_TITLE}"
            echo "${TARGET_URL}"
            echo
            printf "%s\n" "$PLAT_SECTIONS"
          } > email_body.txt

          {
            echo "subject<<EOF"
            printf '%s\n' "$SUBJECT"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          {
            echo "body<<EOF"
            cat email_body.txt
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Send notification email
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ${{ steps.emailprep.outputs.subject }}
          #to: y.kumazaki@hlet.jp, hossy@hossy.org, rika@moontracks.net
          to: y.kumazaki@hlet.jp
          from: ${{ secrets.MAIL_FROM }}
          body: ${{ steps.emailprep.outputs.body }}

      - uses: actions/upload-artifact@v4
        with:
          name: result
          path: result.json

    concurrency:
      group: amz-wp-update
      cancel-in-progress: true